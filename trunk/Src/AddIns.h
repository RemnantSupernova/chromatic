// -----------------------------------------------------------------------
// Chromatic
// Integrated Development Environment
//
// Copyright (C) 2001-2009 Franck Charlet.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//  1. Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL FRANCK CHARLET OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
// -----------------------------------------------------------------------
// AddIns.h: declaration of used variables / structures for AddIns.cpp
// -----------------------------------------------------------------------

#ifndef _ADDINS_H_
#define _ADDINS_H_

// -----------------------------------------------------------------------
// Constants
#define ADDIN_FINISHED 0
#define ADDIN_PERSISTANT 1
#define ADDIN_DIE 2
#define ADDIN_ZOMBIE 3

#define INIFILE_MAIN 0
#define INIFILE_CURRENTUSERMENUS 1
#define INIFILE_TOOLBARS 2
#define INIFILE_COLORS 3
#define INIFILE_FTPACCOUNTS 4
#define INIFILE_SKINS 5
#define INIFILE_PROJECTSTYPES 6
#define INIFILE_LANGUAGES 7
#define INIFILE_DATES 8
#define INIFILE_CGREP 9
#define INIFILE_FILTERS 10

#define HOOK_MDICREATE 0
#define HOOK_MDI 1
#define HOOK_MDICLIENT 2
#define HOOK_CHILDCREATE 3
#define HOOK_CHILD 4
#define HOOK_CMAXXX 5

#define HOOK_CONTINUE 0
#define HOOK_DIE 1

// -----------------------------------------------------------------------
// Structures
typedef struct _ADDINCONTEXT
{
    long Version;
    long NbrChilds;
    long ActiveProject;
    HINSTANCE hInstance;
	long OSType;
    long FullScreenMode;
    long SysTrayMode;
    HWND hMDI;
    HWND hClient;
    HACCEL hAccelerators;
    HWND hTreeView;
    HWND hWindowsList;
    HWND hStatusBar;
    HWND hOutputBox;
    HWND hDebugBox;
    HWND hOutputSysTab;
    HWND hCurrentChild;
    HWND hCurrentCodeMax;
    HWND hRebar;
    HIMAGELIST hEmptyImageList;
    HIMAGELIST hMainImageList;
    HIMAGELIST hLittleImageList;
    HIMAGELIST hControlsImageList;
    HIMAGELIST hDialogEdImageList;
    WNDPROC MDIhWndProc;
    void (__stdcall *ChildCreateProc)(HWND);
    WNDPROC ChildhWndProc;
    WNDPROC CodeMaxhWndProc;
    HWND hProjectToolbar;
    HWND hProjectPager;
    HWND hWindowsToolbar;
    HWND hWindowsPager;
    HWND hOutputBoxToolbar;
    HWND hOutputBoxPager;
	long ColdStart;
} ADDINCONTEXT, *LPADDINCONTEXT;

// MINICHILD structure
typedef struct _MINICHILDDAT
{
    HWND hChildCodeMax;
    char *FileName;
    char *Language;
    long ReadOnly;
    long FileLoaded;
    long ModifFlag;
} MINICHILDDAT, *LPMINICHILDDAT;

// WA Library services (Extended version for Chromatic)
typedef struct _WALIB
{
    // Standard WALib functions
    long WACreateSplashDialog;
    long WACreateModalDialog;
    long WACreateDialog;
    long WACreateSplitter;
    long WACreateMDIDialog;
    long WACreateMDIChildDialog;
    long WACreateToolBar;
    long WACreateImageList;
    long WACreateSysTab;
    long WACreateTrackBar;
    long WACreateUpDown;
    long WACreateProgressBar;
    long WACreateStatusBar;
    long WACreateColorBox;
    long WACreateGripBox;
    long WACreateLabel;
    long WACreatePictureBox;
    long WACreateFrame;
    long WACreateButton;
    long WACreateIPBox;
    long WACreateRichTextBox;
    long WACreateHexBox;
    long WACreateCheckBox;
    long WACreateRebar;
    long WACreatePager;
    long WACreateClient;
    long WACreateRadioButton;
    long WACreateListView;
    long WACreateTreeView;
    long WACreateComboBox;
    long WACreateListBox;
    long WACreateScrollBar;
    long WACreateDumpBox;
    long WACreateStockModalDialog;
    long WACreateTextBox;
    long WACreateDockingBox;
    long DialogSetIcon;
    long DialogGetXUnit;
    long DialogGetYUnit;
    long DialogXPixelToUnit;
    long DialogYPixelToUnit;
    long DialogXUnitToPixel;
    long DialogYUnitToPixel;
    long WAToolBarAddButton;
    long WAToolBarGetButton;
    long WAToolBarGetButtonXSize;
    long WAToolBarGetButtonYSize;
    long WAToolBarGetButtonsCount;
    long WAToolBarGetRowsCount;
    long WAToolBarGetImagelist;
    long WAToolBarAddSeparator;
    long WAToolBarGetNotifiedToolTip;
    long WAToolBarGetNotifiedDropDownItem;
    long WAToolBarDisplayToolTip;
    long WAToolBarResize;
    long WAToolBarSetButtonPressed;
    long WAToolBarSetButtonChecked;
    long WAToolBarSetButtonEnabled;
    long WAToolBarIsButtonPressed;
    long WAToolBarIsButtonChecked;
    long WAToolBarDisplayPopupMenu;
    long WAToolBarGetXSize;
    long WAToolBarGetYSize;
    long WAToolBarGetButtonXPosition;
    long WAToolBarGetXYSize;
    long WAToolBarGetRealPos;
    long WAToolBarGetButtonXYPos;
    long WAToolBarGetButtonIndexXSize;
    long WAToolBarGetXPadding;
    long WAToolBarGetYPadding;
    long WAToolBarGetNotifiedHotItem;
    long WAToolBarRemoveButton;
    long WAToolBarSetButtonBitmap;
    long ImageListDestroy;
    long ImageListAddIcon;
    long ImageListGetIconsCount;
    long ImageListGetIcon;
    long WASysTabAddItem;
    long WASysTabGetCurrentItem;
    long WASysTabGetImagelist;
    long WASysTabSetCurrentItem;
    long WASysTabSetFocusItem;
	long WASysTabHighLightItem;
    long WASysTabItemsCount;
    long WASysTabGetRowsCount;
    long WASysTabSetSeparators;
    long WASysTabSetItemsSize;
    long WASysTabRemoveItem;
    long WASysTabSetMinWidth;
    long WASysTabSetPadding;
    long WATrackBarSetRange;
    long WATrackBarSetPos;
    long WATrackBarGetPos;
    long WATrackBarSetTicks;
    long WATrackBarGetToolTips;
    long ProgressBarSetRange;
    long ProgressBarSetRelPos;
    long StatusBarSetParts;
    long StatusBarSetText;
    long StatusBarGetYSize;
    long ColorBoxGetColor;
    long ColorBoxSetColor;
    long GripBoxGetColor;
    long GripBoxSetColor;
    long GripBoxClose;
    long GripBoxVisible;
    long GripBoxResize;
    long LabelGetImage;
    long PictureBoxChangeIcon;
    long PictureBoxChangeImage;
    long FrameRefreshToolbar;
    long ButtonSetIcon;
    long ButtonGetImage;
    long ButtonGetState;
    long IPBoxClearIP;
    long IPBoxGetIP;
    long IPBoxSetIP;
    long IPBoxSetFocus;
    long IPBoxSetRange;
    long IPBoxIsBlank;
    long WATextBoxGetLen;
    long WATextBoxSetMaxLen;
    long WATextBoxGetMaxLen;
    long WATextBoxGetTextHandle;
    long WATextBoxAddText;
    long WATextBoxSelText;
    long WATextBoxRemoveSel;
    long WATextBoxSetCaretPos;
    long WATextBoxLinesCount;
    long WATextBoxGetMarginWidth;
    long WATextBoxGetFirstVisibleLine;
    long WATextBoxIsModified;
    long WATextBoxGetCurrentOptions;
    long WATextBoxGetPasswordChar;
    long WATextBoxSetPasswordChar;
    long WATextBoxGetSelection;
    long WATextBoxGetScrollPos;
    long WATextBoxGetBreakProcAddress;
    long WATextBoxCanPaste;
    long WATextBoxCanUndo;
    long CheckBoxGetState;
    long CheckBoxSetState;
    long WARebarAddBand;
    long WARebarRemoveBand;
    long WARebarGetXSize;
    long WARebarGetYSize;
    long WARebarResize;
    long WARebarSetBackColor;
    long WARebarSetTextColor;
    long WARebarBandVisible;
    long WARebarGetBandsCount;
    long WARebarGetHeight;
    long WARebarGetBackGroundColor;
    long WARebarGetRowsCount;
    long WARebarGetToolTips;
    long WARebarGetTextColor;
    long WARebarGetPalette;
    long WARebarGetImageList;
    long WAPagerDisplaySetSize;
    long WAPagerMaximizeX;
    long WAPagerMaximizeY;
    long WAPagerGetNotifiedChild;
    long WAPagerSetBackColor;
    long WAPagerGetBackColor;
    long WAPagerGetBorderSize;
    long WAPagerGetButtonSize;
    long WAPagerGetScrollPos;
	long WAPagerGetOrientation;
	long WAPagerSetOrientation;
	long WAPagerChangeOrientation;
    long WAClientResize;
    long WAClientGetActiveChild;
    long WAClientSetNextChild;
    long WAClientSetPreviousChild;
    long WAClientTileHorizontal;
    long WAClientTileVertical;
    long WAClientTileCascade;
    long WAClientTileArrangeIconic;
    long RadioButtonGetState;
    long RadioButtonSetState;
    long WAListViewAddCol;
    long WAListViewSetColWidth;
    long WAListViewGetColWidth;
    long WAListViewSetScroll;
    long WAListViewClear;
    long WAListViewDetachImageList;
    long WAListViewAddItem;
    long WAListViewDeleteItem;
    long WAListViewSetSubItem;
    long WAListViewSetSubItemImage;
    long WAListViewGetSubItemImage;
    long WAListViewEditValidated;
    long WAListViewGetEditResult;
    long WAListViewItemCount;
    long WAListViewSelItemCount;
    long WAListViewMultiSelFirstItem;
    long WAListViewGetItemSelState;
    long WAListViewSetEditModeOn;
    long WAListViewSetItemSel;
    long WAListViewSetItemHighlight;
    long WAListViewSetItemFocus;
    long WAListViewGetItemUnderCursor;
    long WAListViewGetFirstFocusItem;
    long WAListViewGetSelItem;
    long WAListViewGetSelItemText;
    long WAListViewSetSelItemText;
    long WAListViewCheckBoxItemDoubleClick;
    long WAListViewGetItemText;
    long WAListViewGetItemIcon;
    long WAListViewGetNotifiedColumnIndex;
    long WAListViewSort;
    long WAListViewReOrder;
    long WAListViewGetHeaderLabel;
    long WAListViewGetHeaderPosition;
    long WAListViewSetHeaderPosition;
    long WAListViewSetBackColor;
    long WAListViewGetBackColor;
    long WAListViewGetTextBackColor;
    long WAListViewGetTextColor;
    long WAListViewGetToolTips;
    long WAListViewGetTopIndex;
    long WAListViewGetCountPerPage;
    long WAListViewGetEditControl;
    long WAListViewGetExStyle;
    long WAListViewGetSysHeader;
    long WAListViewGetHotCursor;
    long WAListViewGetImageList;
    long WAListViewSetItemCheckbox;
    long WAListViewGetItemCheckbox;
    long WAListViewIsCheckboxNotify;
    long WAListViewFindItem;
    long WAListViewFindSubItem;
    long WAListViewBeginDrag;
    long WAListViewMoveDrag;
    long WAListViewEndDrag;
    long WAListViewPasteAutoEdit;
    long WATreeViewAddItem;
    long WATreeViewSetToolTips;
    long WATreeViewGetToolTips;
    long WATreeViewSetIndent;
    long WATreeViewRemoveItem;
    long WATreeViewSetBackColor;
    long WATreeViewGetExpandingState;
    long WATreeViewGetExpandingItem;
    long WATreeViewGetDeletedItem;
    long WATreeViewSetItemIcon;
    long WATreeViewSetItemExpandedState;
    long WATreeViewGetItemExpandedState;
    long WATreeViewSetSingleExpandState;
    long WATreeViewGetSelectedItem;
    long WATreeViewGetItemFromPos;
    long WATreeViewSetSelectedItem;
    long WATreeViewGetItemText;
    long WATreeViewSetItemText;
    long WATreeViewGetItemParent;
    long WATreeViewGetRoot;
    long WATreeViewGetItemCount;
    long WATreeViewGetVisibleCount;
    long WATreeViewGetFirstItemChild;
    long WATreeViewGetNextItem;
    long WATreeViewGetPreviousItem;
    long WATreeViewSearchItemText;
    long WATreeViewSearchChildPartialText;
    long WATreeViewGetChildItemsCount;
    long WATreeViewGetSelChildItemPos;
    long WATreeViewGetItemLevel;
    long WATreeViewGetBackColor;
    long WATreeViewGetEditControl;
    long WATreeViewGetImageList;
    long WATreeViewGetIndent;
    long WATreeViewGetInsertMarkColor;
    long WATreeViewGetLineColor;
    long WATreeViewGetTextColor;
    long WATreeViewGetItemHeight;
    long WATreeViewGetScrollTime;
    long WATreeViewGetItemTextRect;
    long WATreeViewGetItemRect;
    long WAComboBoxAddItem;
    long WAComboBoxDeleteItem;
    long WAComboBoxReset;
    long WAComboBoxSetMaxLen;
    long WAComboBoxCount;
    long WAComboBoxGetIndex;
    long WAComboBoxSetIndex;
    long WAComboBoxGetItem;
    long WAComboBoxGetCurrentItem;
    long WAComboBoxItemExist;
    long WAComboBoxGetItemData;
    long WAComboBoxSaveInIniFile;
    long WAComboBoxFillFromIniFile;
    long WAListBoxAddItem;
    long WAListBoxReset;
    long WAListBoxSetHorzScrollWidth;
    long WAListBoxSetColumnsWidth;
    long WAListBoxCount;
    long WAListBoxGetTopIndex;
    long WAListBoxSetTopIndex;
    long WAListBoxSetItemData;
    long WAListBoxGetItemData;
    long WAListBoxIsItemSelected;
    long WAListBoxGetSelItemIndex;
    long WAListBoxSetIndex;
    long WAListBoxGetCurrentItem;
    long WAListBoxGetItem;
    long WAListBoxDeleteItem;
    long WAListBoxReplaceItem;
    long WAListBoxReplaceSelItem;
    long WAListBoxProcessDrag;
    long WAListBoxSelItemDown;
    long WAListBoxSelItemUp;
    long WAListBoxSelItemRemove;
    long WAListBoxItemExist;
    long WAListBoxItemUnderCursor;
    long WAScrollBarGetMinRange;
    long WAScrollBarGetMaxRange;
    long WAScrollBarGetPageRange;
    long WAScrollBarSetPageRange;
    long WAScrollBarShowHide;
    long WAScrollBarSetMinMaxRange;
    long WADumpBoxResize;
    long WADumpBoxScrollDown;
    long WADumpBoxScrollUp;
    long WADumpBoxGetVisibleLines;
    long WADumpBoxGetVisibleColumns;
    long DockingBoxGetState;
    long DockingBoxRemove;
    long DockingBoxShow;
    long DockingBoxWasVisible;
	long WAMenuGetString;
    long WAMenuEnable;
    long WAMenuSetDefaultItem;
    long WAMenuSetItemState;
    long WAMenuSetItemType;
    long WAMenuSetItemText;
    long ScreenWidth;
    long ScreenHeight;
    long ScreenRectToClient;
    long WACursorSetWait;
    long WACursorSetNo;
    long WACursorSetCross;
    long WACursorSetNormal;
    long WACursorDisable;
    long WACursorEnable;
    long WAIniReadKey;
    long WAIniReadBoolKey;
    long WAIniWriteSection;
    long WAIniDeleteKey;
    long WAIniWriteKey;
    long MathGenerateRandomNumber;
    long WADateGetNow;
    long WADateGetYear;
    long WADateGetMonth;
    long WADateGetDay;
    long WADateGetHour;
    long WADateGetMinutes;
    long WADateGetSeconds;
    long WADateGetFormat;
    long WADateGetTimeFormat;
    long StringIsLabel;
    long StringIsHexaDecimal;
    long StringIsDecimal;
    long StringIsLabelChar;
    long StringIsDigitChar;
    long StringIsHexaChar;
    long StringIsAlphaChar;
    long StringIsBlankChar;
    long StringIsOpenBracketChar;
    long StringIsUnderLineChar;
    long StringIsDotChar;
    long StringIsCommaChar;
    long StringIsQuoteChar;
    long StringIsArobasChar;
    long StringIsEOL;
    long StringNumberComplement;
    long StringHexNumberComplement;
    long StringBinNumberComplement;
    long StringCount;
    long StringReplace;
    long StringHex32;
    long StringHex16;
    long StringHex8;
    long StringSplit;
    long StringGetSplitUBound;
    long StringGetSplitElement;
    long StringReleaseSplit;
    long StringJoin;
    long StringFree;
    long StringLen;
    long StringCat;
    long StringDecToString;
    long StringStringToDec;
    long StringStringToHex;
    long StringCountLines;
    long StringGetLinesOffsets;
    long StringFilterNonPrintableChars;
    long StringLeft;
    long StringRight;
    long StringTrim;
    long StringLTrim;
    long StringRTrim;
    long StringInStr;
    long StringMid;
    long StringUpperCase;
    long StringLowerCase;
    long StringReverse;
    long StringSpace;
    long StringString;
    long StringIsNumeric;
    long StringFillHexBytes;
    long StringFillHexWords;
    long StringFillHexDWords;
	long StringFileNameToLabel;
	long WAFileGetWriteTime;
    long WAFileGetCreationTime;
    long WAFileGetAccessedTime;
    long WAFileGetExtension;
    long WAFileRemoveExtension;
    long WAFileReplaceExtension;
    long WAFileGetDirectory;
    long WAFileGetFileName;
    long WAFileOpenR;
    long WAFileOpenW;
    long WAFileOpenWAppend;
	long WAFileClose;
    long WAFileCreateEmpty;
    long WAFileWriteBuffer;
    long WAFileWriteLine;
    long WAFileIsDirectory;
    long WAFileGetSize;
    long WAFileExist;
    long WAFileIsReadOnly;
    long WAFileIsUnix;
    long WAFileLoadIntoMem;
    long WAFileSaveFromMem;
    long WAFileDir;
    long WARegistryUpdateKey;
    long WARegistryDeleteKey;
    long WARegistryGetKeyValue;
    long WAGDIFillWindow;
    long WAGDIFillWindowFromBrush;
    long WAGDIFillWindowFromBrushAndhDC;
    long WAGDICreateColorBrush;
    long WAGDIObtainFont;
    long WAGDIDrawHorzSep;
    long WAGDIDrawVertSep;
    long WAGDIDrawLine;
    long WAGDIDrawLineXOR;
    long WAGDIDrawPixel;
    long WAGDIWriteText;
    long WAGDIWriteClippedText;
    long WAGDIGetTextWidth;
    long WAGDIGetTextHeight;
    long WAGDIGetFontWidth;
    long WAGDIGetFontHeight;
    long WAGDICreateBackDC;
    long WAGDIDestroyBackDC;
    long WAGDIBlitBackDC;
    long WAGDIColorCalcLuminosity;
    long WAGDIGetSerif;
    long WAGDIGetSerif10;
    long WAGDIGetCourierNew9;
    long WAControlNextHook;
	long WAControlSendMessage;
    long WAControlClientTop;
    long WAControlClientLeft;
    long WAControlClientWidth;
    long WAControlClientHeight;
    long WAControlBringToTop;
    long WAControlBringToBottom;
    long WAControlSetTopMost;
    long WAControlRemTopMost;
    long WAControlRefresh;
    long WAControlRefreshLocal;
    long WAControlRepaint;
    long WAControlResize;
    long WAControlFreeze;
    long WAControlBound;
    long WAControlEnable;
    long WAControlVisible;
    long WAControlIsVisible;
    long WAControlIsEnabled;
    long WAControlGetText;
    long WAControlGetTextLen;
    long WAControlSetText;
    long WAControlGetNotifiedMsg;
    long WAControlGetNotifiedhWnd;
    long WAControlGetNotifiedID;
    long WAControlTop;
    long WAControlLeft;
    long WAControlWidth;
    long WAControlHeight;
    long WAControlGetHwndFromPoint;
    long WAControlGetNotifiedCommand;
    long WAControlGetXMousePos;
    long WAControlGetYMousePos;
    long WAControlGetFont;
    long WAControlGetIcon;
    long WAControlGetHotKey;
    long WAControlSetFont;
    long WAControlSetFontNoRedraw;
    long WAControlIsWindowChild;
    long WAControlGetClassName;
    long WAControlSetClassCursor;
    long WAControlGetWindowState;
    long WAControlClose;
	long WAComDlgChooseColor;
    long WAComDlgGetOpenFileName;
    long WAComDlgGetSaveFileName;
    long WAComDlgChooseFont;
    long WAComDlgBrowseForFolder;
    long WAComDlgParseMultiFilesSelection;
	long WinsockInit;
    long WinsockUnInit;
    long SocketCreate;
    long SocketDestroy;
    long SocketConnect;
    long SocketGetPort;
    long SocketListen;
    long SocketAcceptConnection;
    long SocketSendASCIIDatasCR;
    long SocketSendUnknownDatas;
    long SocketGetRevcLen;
    long SocketReceiveASCIIDatas;
    long SocketReceiveUnknownDatas;
    long WAFTPInitiatePort;
    long WAFTPGetEntryDate;
    long WAFTPGetEntryFileName;
    long WAFTPGetEntryFileAttributes;
    long WAFTPGetEntryFileSize;
    long WAFTPIsEntryDir;
    long WAMiscClipBoardCopyText;
    long WAMiscClipBoardPasteText;
    long WAMiscClipBoardIsEmpty;
    long WAMiscShellAddFileToRecents;
    long WAMiscWaitEvents;
    long WAMiscMsgBox;
    long WAMiscSendBroadCastMsg;
    long WAMiscDoEvents;
    long WAMiscObtainGUID;
    long WAMiscAllocMem;
    long WAMiscFreeMem;
    long WAMiscCopyMemLoop;
    long WAMiscCopyMemWithOffsets;
    long WAMiscGetOSClass;
	long WAMiscObtainExtendedFunctions;
    long WAMMGetWindowLangGUID;
    long WAMMGetWindowLangInclude;
    long WAMMGetWindowLangDoubleSlash;
    long WAMMGetWindowLangComment;
    long WAMMGetWindowLangMultiComment;
    long WAMMGetWindowLangMultiCommentEnd;
    long WAMMGetWindowLangProc;
    long WAMMGetWindowLangEndp;
    long WAMMGetWindowLangProcInterlace;
    long WAMMGetWindowLangProcOrphan;
    long WAMMGetWindowLangProcOpenBlock;
    long WAMMGetWindowLangProcCloseBlock;
    long WAMMGetWindowLangFileName;
    long WAMMGetWindowLangIncludeName;
    long WAMMGetWindowLangIncludeNameFoot;
    long WAMMDecodeRelativePaths;
    long WAMMRemoveRelativePaths;
    long WAMMEncodeRelativePaths;
    long WAMMRunUserCommand;
    long WAMMRunCommandScript;
    long WAMMRunDOSCmd;
    long WAMMRunDOSCmdCapture;
	long WAMMDisplayHelpFile;
    long WAMMGetWindowPath;
    long WAMMIsFileWorkSpace;
    long WAMMIsFileProject;
    long WAMMGetCurrentChildState;
    long GotoFileLine;
    long WAMMFocusOnFile;
    long WAMMGetFileNameFromTreeViewItem;
    long WAMMGetLabelFromTreeViewItem;
    long WAMMOpenUnknownFile;
    long WAMMHexToDec;
    long WAMMDecToHex;
    long WAMMDecToBin;
    long WAMMHexToBin;
    long WAMMBinToDec;
    long WAMMBinToHex;
    long WAMMHexToFlt;
    long WAMMFltToHex;
    long WAMMGetProceduresList;
    long WAMMGetLineFromFile;
    long WAMMCreateNewWindow;
    long WAMMClearWindow;
    long WAMMReloadWindow;
    long WAMMCloseWindow;
    long WAMMCloseAllWindows;
    long WAMMSaveAllWindows;
    long WAMMPrintWindow;
    long WAMMSaveWindow;
    long WAMMUndo;
    long WAMMRedo;
    long WAMMCut;
    long WAMMCopy;
    long WAMMCopyFilePathName;
    long WAMMCopyEntireText;
    long WAMMPaste;
    long WAMMDeleteSel;
    long WAMMDeleteLine;
    long WAMMDeleteToStart;
    long WAMMDeleteToEnd;
    long WAMMSelectLine;
    long WAMMSelectAll;
    long WAMMSelectProc;
    long WAMMFindNext;
    long WAMMFindPrevious;
    long WAMMFindSelection;
    long GotoTop;
    long GotoBottom;
    long GotoLine;
    long GotoMatchingBracket;
    long GotoPrevWord;
    long GotoNextWord;
    long GotoPrevLetter;
    long GotoNextLetter;
    long GotoPrevLine;
    long GotoNextLine;
    long GotoPrevPage;
    long GotoNextPage;
    long WAMMGetMiniChildStruct;
    long WAMMGetIniFilePathName;
    long WAMMGetQuickDirectory;
    long WAMMGetContext;
    long WAMMGetcurrentLine;
    long WAMMSelectCurrentWord;
    long WAMMGetCurrentWord;
    long InsertText;
    long WAMMInsertLine;
    long WAMMInsertLines;
    long WAMMSetText;
    long WAMMGetCaretRealXCoordinate;
    long WAMMGetCaretRealYCoordinate;
    long WAMMSetFocusInsideWindow;
    long WAMMRestoreMDIFromSysTray;
    long WAMMInstallHookProc;
    long WAMMUnInstallHookProc;
    long WAMMGetCurrentLineNumber;
    long WAMMGetCurrentColNumber;
    long WAMMGetCurrentLineText;
    long WAMMGetLineText;
    long WAMMWriteToOutputBox;
    long WAMMEnumSourceWindows;
    long WAMMAddInKillZombie;
    long WAMMSpAddInIsAvailable;
    long WAMMMiscInputBox;
    long WAMMIsChildReadOnly;
    long WAMMSetChildReadOnly;
	long WAMMCreateCustomChildDialog;
	long WAMMCreateCodeMax;
} WALIB, *LPWALIB;

// -----------------------------------------------------------------------
// Variables
extern CList <HMODULE> AddInsDLL;
extern CList <HMODULE> OldAddInsDLL;
extern CList <char *> AddInsFiles;
extern CList <int> LoadedAddIns;
extern CList <int> RunningAddIns;
extern CList <int> OldRunningAddIns;
extern CList <char *> OldAddInsFiles;
extern CList <char *> AddInsDescriptions;
extern CList <FARPROC> AddInsLoad;
extern CList <FARPROC> AddInsUnLoad;
extern CList <FARPROC> AddInsMenu;
extern WALIB AddInLib;

extern CList <long> MDICreateHooks;
extern CList <DLGPROC> MDIHooks;
extern CList <DLGPROC> MDIClientHooks;
extern CList <long> ChildCreateHooks;
extern CList <DLGPROC> ChildHooks;
extern CList <DLGPROC> CodeMaxHooks;
extern CList <int> MDICreateHooksNbr;
extern CList <int> MDIHooksNbr;
extern CList <int> MDIClientHooksNbr;
extern CList <int> ChildCreateHooksNbr;
extern CList <int> ChildHooksNbr;
extern CList <int> CodeMaxHooksNbr;
extern long HookNbr;

extern void (CALLBACK *CurCustChildInit)(HWND hwnd);
extern WNDPROC CurCustChildProc;
extern CStr CurCustChildTitle;

// -----------------------------------------------------------------------
// Functions declarations
void FillAddInsArrays(void);
void ReFillAddInsArrays(void);
void SetAddInsRunningState(void);
void StopAddIns(void);
long ShutDownAddIn(long AddInNumber);
long RestartAddIn(long AddInNumber);
void FillAddInsMenu(void);
long SearchAddInName(CStr AddInName);
long SearchOldAddInName(CStr AddInName);
CStr GetDLLDescription(CStr AddInName, FARPROC DescriptionRoutine);
CStr GetDLLAuthor(FARPROC AuthorRoutine);
long IsAddIn(CStr AddInName);
long IsSpAddIn(CStr SpAddInName);
long RunAddIn(long AddInToRun);
void FillWaLib(void);
long CALLBACK Wrapper_WACreateStockModalDialog(long TemplateNumber, long DLeft, long DTop, long DWidth, long DHeight, HWND hParent, char *DTitle, DLGPROC WinProc, long Centered);
char * CALLBACK WAMMGetWindowLangGUID(HWND hForm);
char * CALLBACK WAMMGetWindowLangInclude(HWND hForm);
char * CALLBACK WAMMGetWindowLangDoubleSlash(HWND hForm);
char * CALLBACK WAMMGetWindowLangComment(HWND hForm);
char * CALLBACK WAMMGetWindowLangMultiComment(HWND hForm);
char * CALLBACK WAMMGetWindowLangMultiCommentEnd(HWND hForm);
char * CALLBACK WAMMGetWindowLangProc(HWND hForm);
char * CALLBACK WAMMGetWindowLangEndp(HWND hForm);
long CALLBACK WAMMGetWindowLangProcInterlace(HWND hForm);
long CALLBACK WAMMGetWindowLangProcOrphan(HWND hForm);
char * CALLBACK WAMMGetWindowLangProcOpenBlock(HWND hForm);
char * CALLBACK WAMMGetWindowLangProcCloseBlock(HWND hForm);
char * CALLBACK WAMMGetWindowLangFileName(HWND hForm);
char * CALLBACK WAMMGetWindowLangIncludeName(HWND hForm);
char * CALLBACK WAMMGetWindowLangIncludeNameFoot(HWND hForm);
char * CALLBACK WAMMDecodeRelativePaths(char *PathName);
char * CALLBACK WAMMRemoveRelativePaths(char *PathName);
char * CALLBACK WAMMEncodeRelativePaths(char *PathName);
void CALLBACK WAMMRunUserCommand(long CmdNumber);
void CALLBACK WAMMRunCommandScript(char *CommandScript, long SaveFiles);
long CALLBACK Wrapper_WAComDlgChooseColor(HWND hWnd, long *ColorToGet);
char * CALLBACK Wrapper_WAComDlgGetOpenFileName(HWND hWnd, char *FilesFilter, char *PrimaryDir, long MultiSelect);
char * CALLBACK Wrapper_WAComDlgGetSaveFileName(HWND hWnd, char *FilesFilter, char *PrimaryDir);
long CALLBACK Wrapper_WAComDlgChooseFont(HWND hWnd, char *FntName, long FntSize, long FixedOnly, LPLOGFONT WALogFont, LPCHOOSEFONT WAMyFont);
char * CALLBACK Wrapper_WAComDlgBrowseForFolder(HWND hParent, char *BrowseTitle);
char * CALLBACK Wrapper_WAComDlgParseMultiFilesSelection(char *SelectedFiles, long (CALLBACK *EnumProc)(char *, long), long EnumDirection, long UserValue);
long CALLBACK WAMMDisplayHelpFile(char *HelpFile, char *HelpWord);
long CALLBACK WAMMRunDOSCmd(char *CmdName, char *CmdArgs, char *CmdDir, char *CmdOutputFile);
void CALLBACK WAMMRunDOSCmdCapture(char *CmdName, char *CmdArgs, char *CmdDir);
void CALLBACK WAMMSetFocusInsideWindow(HWND hWnd);
char * CALLBACK WAMMGetWindowPath(void);
long CALLBACK WAMMIsFileWorkSpace(char *FileName);
long CALLBACK WAMMIsFileProject(char *FileName);
long CALLBACK WAMMGetCurrentChildState(void);
HWND CALLBACK GotoFileLine(char *FileName, long LineNbr, long AddInRecents);
void CALLBACK WAMMFocusOnFile(char *FileName, long AddInRecents);
char * CALLBACK WAMMGetFileNameFromTreeViewItem(HTREEITEM hItem);
char * CALLBACK WAMMGetLabelFromTreeViewItem(HTREEITEM hItem);
long CALLBACK WAMMOpenUnknownFile(char *FileName, int AddInRecent);
char * CALLBACK WAMMHexToDec(char *HexNumber);
char * CALLBACK WAMMDecToHex(char *DecNumber);
char * CALLBACK WAMMDecToBin(char *DecNumber);
char * CALLBACK WAMMHexToBin(char *HexNumber);
char * CALLBACK WAMMBinToDec(char *BinNumber);
char * CALLBACK WAMMBinToHex(char *BinNumber);
char * CALLBACK WAMMHexToFlt(char *BinNumber);
char * CALLBACK WAMMFltToHex(char *BinNumber);
char * CALLBACK WAMMGetProceduresList(char *FileName);
char * CALLBACK WAMMGetLineFromFile(HANDLE hFile, long LineNumber);
HWND CALLBACK WAMMCreateNewWindow(void);
void CALLBACK WAMMClearWindow(HWND hForm);
void CALLBACK WAMMReloadWindow(HWND hForm);
void CALLBACK WAMMCloseWindow(HWND hForm);
void CALLBACK WAMMCloseAllWindows(void);
void CALLBACK WAMMSaveAllWindows(void);
void CALLBACK WAMMPrintWindow(HWND hForm, long PrintSelection);
char * CALLBACK WAMMSaveWindow(HWND hForm);
void CALLBACK WAMMUndo(HWND hForm);
void CALLBACK WAMMRedo(HWND hForm);
void CALLBACK WAMMCut(HWND hForm);
void CALLBACK WAMMCopy(HWND hForm);
long CALLBACK WAMMCopyFilePathName(HWND hForm);
long CALLBACK WAMMCopyEntireText(HWND hForm);
void CALLBACK WAMMPaste(HWND hForm) ;
void CALLBACK WAMMDeleteSel(HWND hForm);
void CALLBACK WAMMDeleteLine(HWND hForm);
void CALLBACK WAMMDeleteToStart(HWND hForm);
void CALLBACK WAMMDeleteToEnd(HWND hForm);
void CALLBACK WAMMSelectLine(HWND hForm);
void CALLBACK WAMMSelectAll(HWND hForm);
long CALLBACK WAMMSelectProc(HWND hForm);
void CALLBACK WAMMFindNext(HWND hForm);
void CALLBACK WAMMFindPrevious(HWND hForm);
void CALLBACK WAMMFindSelection(HWND hForm);
void CALLBACK GotoTop(HWND hForm);
void CALLBACK GotoBottom(HWND hForm);
void CALLBACK GotoLine(HWND hForm, long LineNumber);
void CALLBACK GotoMatchingBracket(HWND hForm);
void CALLBACK GotoPrevWord(HWND hForm, long Selection);
void CALLBACK GotoNextWord(HWND hForm, long Selection);
void CALLBACK GotoPrevLetter(HWND hForm, long Selection);
void CALLBACK GotoNextLetter(HWND hForm, long Selection);
void CALLBACK GotoPrevLine(HWND hForm, long Selection);
void CALLBACK GotoNextLine(HWND hForm, long Selection);
void CALLBACK GotoPrevPage(HWND hForm, long Selection);
void CALLBACK GotoNextPage(HWND hForm, long Selection);
void CALLBACK WAMMGetMiniChildStruct(HWND hForm, LPMINICHILDDAT MiniChildStruct);
char * CALLBACK WAMMGetIniFilePathName(long FileNumber);
char * CALLBACK WAMMGetQuickDirectory(long FileNumber);
void CALLBACK WAMMGetContext(LPADDINCONTEXT VarsStruct);
char * CALLBACK WAMMGetcurrentLine(HWND hForm);
char * CALLBACK WAMMSelectCurrentWord(HWND hForm);
char * CALLBACK WAMMGetCurrentWord(HWND hForm);
void CALLBACK InsertText(HWND hForm, char *Txt);
void CALLBACK WAMMInsertLine(HWND hForm, char *Txt);
void CALLBACK WAMMInsertLines(HWND hForm, long Txt);
void CALLBACK WAMMSetText(HWND hForm, char *Txt);
void CALLBACK WAMMRestoreMDIFromSysTray(void);
long CALLBACK WAMMInstallHookProc(long HookAddress, long HookType);
void CALLBACK WAMMUnInstallHookProc(long HookAddress, long HookType, long HookNumber);
long CALLBACK WAMMGetCurrentLineNumber(HWND hWnd);
long CALLBACK WAMMGetCurrentColNumber(HWND hWnd);
char * CALLBACK WAMMGetCurrentLineText(HWND hWnd);
char * CALLBACK WAMMGetLineText(HWND hWnd, long Line);
void CALLBACK WAMMWriteToOutputBox(char *WAText);
void CALLBACK WAMMEnumSourceWindows(long CallBack);
int CALLBACK EnumChilds(HWND hWnd, long lParam);
void CALLBACK WAMMAddInKillZombie(long CallBack);
long CALLBACK WAMMSpAddInIsAvailable(char *AlienDllName);
char * CALLBACK WAMMMiscInputBox(HWND hParent, char *NameTitle, long Icon, char *ValueToPass, long PromptLen, long PromptType, char *PromptIniKey);
long CALLBACK Wrapper_WAMenuSetItemText(HMENU hMenu, char *Wrapper_ItemText, long ItemID);
long CALLBACK Wrapper_WAMiscClipBoardCopyText(char *Wrapper_WATxt);
char * CALLBACK Wrapper_WAMiscClipBoardPasteText(void);
long CALLBACK Wrapper_WAComboBoxAddItem(HWND Wrapper_WAhCB, char *Wrapper_WACBItemText, long Wrapper_WACBItemIndex);
char * CALLBACK Wrapper_WAComboBoxGetCurrentItem(HWND Wrapper_WAhCB);
char * CALLBACK Wrapper_WAComboBoxGetItem(HWND Wrapper_WAhCB, long Wrapper_WACBIndex);
long CALLBACK Wrapper_WAComboBoxItemExist(HWND Wrapper_WAhCB, char *Wrapper_WACBItem);
void CALLBACK Wrapper_WAComboBoxSaveInIniFile(HWND Wrapper_WAhCB, char *EntryToAdd, char *IniKey, char *IniFile);
void CALLBACK Wrapper_WAComboBoxFillFromIniFile(HWND Wrapper_WAhCB, char *IniKey, char *IniFile);
char * CALLBACK Wrapper_WAControlGetClassName(HWND Wrapper_WAhWnd);
char * CALLBACK Wrapper_WAControlGetText(HWND Wrapper_WAhWnd);
long CALLBACK Wrapper_WAControlSetText(HWND Wrapper_WAhWnd, char *WAATextToSet);
HWND CALLBACK Wrapper_WACreateButton(long Wrapper_WABLeft, long Wrapper_WABTop, long Wrapper_WABWidth, long Wrapper_WABHeight, HWND Wrapper_WAhParent, char *Wrapper_WABText, long Wrapper_WACtrlID, long Wrapper_WAImgType, HICON Wrapper_WAhImage, WNDPROC Wrapper_WAWinProc, long Wrapper_WAExtraStyle, long Wrapper_WAExtraExStyle);
long CALLBACK Wrapper_WAMiscMsgBox(HWND WAHParent, char *WAMBText, long WAMBType);
HWND CALLBACK Wrapper_WACreateCheckBox(long WABLeft, long WABTop, long WABWidth, long WABHeight, HWND WAHParent, char *WABText, long WACtrlID, WNDPROC WAWinProc, long WAExtraStyle, long WAUnderState);
HWND CALLBACK Wrapper_WACreateComboBox(long WABLeft, long WABTop, long WABWidth, long WABHeight, HWND WAHParent, char *WABText, long WACtrlID, WNDPROC WAWinProc, long WAExtraStyle);
HWND CALLBACK Wrapper_WACreateDialog(long WADLeft, long WADTop, long WADWidth, long WADHeight, HWND WAHParent, HMENU WAhMenu, HICON WAhIcon, char *WADTitle, void (CALLBACK *WAInitProc)(HWND hwnd), WNDPROC WAWinProc, long WAWExStyle, long WAWStyle, long WAShowType);
HWND CALLBACK Wrapper_WACreateFrame(long WABLeft, long WABTop, long WABWidth, long WABHeight, HWND WAHParent, char *WABText, long WACtrlID, WNDPROC WAWinProc, long WAExtraStyle);
HWND CALLBACK Wrapper_WACreateHexBox(long WAEDLeft, long WAEDTop, long WAEDWidth, long WAEDHeight, HWND WAHParent, char *WAEDText, long WACtrlID, long WAMaxDigits, long WAExtraStyle, long WAExtraExStyle);
HWND CALLBACK Wrapper_WACreateLabel(long WALLeft, long WALTop, long WALWidth, long WALHeight, HWND WAHParent, char *WALText, long WACtrlID, WNDPROC WAWinProc, long WAExtraStyle, HFONT WAhFont);
HWND CALLBACK Wrapper_WACreateMDIChildDialog(HWND WAHParent, char *WACTitle, HICON WAhIcon, void (CALLBACK *WAInitProc)(HWND hwnd), WNDPROC WAWinProc, long WAExtraStyle, long WAZeroPos, char *WACustomClass);
HWND CALLBACK Wrapper_WACreateMDIDialog(long WAMDILeft, long WAMDITop, long WAMDIWidth, long WAMDIHeight, HWND WAHParent, HMENU WAhMenu, HICON WAhIcon, char *WAMDITitle, void (CALLBACK *WAInitProc)(HWND hwnd), WNDPROC WAWinProc, long WAExtraStyle, long WAShowType);
long CALLBACK Wrapper_WACreateModalDialog(long WADLeft, long WADTop, long WADWidth, long WADHeight, HWND WAHParent, DLGPROC WAWinProc, long WAExtraStyle, long WACentered);
HWND CALLBACK Wrapper_WACreateRadioButton(long WABLeft, long WABTop, long WABWidth, long WABHeight, HWND WAHParent, char *WABText, long WACtrlID, WNDPROC WAWinProc, long WAExtraStyle);
HWND CALLBACK Wrapper_WACreateRichTextBox(long WAEDLeft, long WAEDTop, long WAEDWidth, long WAEDHeight, HWND WAHParent, char *WAEDText, long WACtrlID, WNDPROC WAWinProc, long WAExtraStyle, long WASetborder);
HWND CALLBACK Wrapper_WACreateSplashDialog(long WADLeft, long WADTop, long WADWidth, long WADHeight, char *WADTitle, HWND WAHParent, HMENU WAhMenu, HICON WAhIcon, void (CALLBACK *WAInitProc)(HWND hwnd), WNDPROC WAWinProc, long WAWExStyle, long WAWStyle, long WAShowType);
HWND CALLBACK Wrapper_WACreateStatusBar(char *WASBText, long WARaiseType, HWND WAHParent, long WACtrlID, WNDPROC WAWinProc, long WAExtraStyle);
HWND CALLBACK Wrapper_WACreateTextBox(long WAEDLeft, long WAEDTop, long WAEDWidth, long WAEDHeight, HWND WAHParent, char *WAEDText, long WACtrlID, WNDPROC WAWinProc, long WAExtraStyle, long WAExtraExStyle);
char * CALLBACK Wrapper_WADateGetDay(void);
char * CALLBACK Wrapper_WADateGetFormat(char *WADateformat);
char * CALLBACK Wrapper_WADateGetHour(void);
char * CALLBACK Wrapper_WADateGetMinutes(void);
char * CALLBACK Wrapper_WADateGetMonth(void);
char * CALLBACK Wrapper_WADateGetNow(long WAReportSeconds);
char * CALLBACK Wrapper_WADateGetSeconds(void);
char * CALLBACK Wrapper_WADateGetTimeFormat(char *WADateformat);
char * CALLBACK Wrapper_WADateGetYear(void);
HANDLE CALLBACK Wrapper_WAFileCreateEmpty(char *WAFileName, long WASecurity);
long CALLBACK Wrapper_WAFileExist(char *WAFileToSearch);
long CALLBACK Wrapper_WAFileGetAccessedTime(char *WAFileName, LPFILETIME WAFileAccessedTime);
long CALLBACK Wrapper_WAFileGetCreationTime(char *WAFileName, LPFILETIME WAFileCreationTime);
char * CALLBACK Wrapper_WAFileGetDirectory(char *WAFileName);
char * CALLBACK Wrapper_WAFileGetExtension(char *WAFileName);
char * CALLBACK Wrapper_WAFileGetFileName(char *WAFileName);
long CALLBACK Wrapper_WAFileGetSize(char *WAFileName);
long CALLBACK Wrapper_WAFileGetWriteTime(char *WAFileName, LPFILETIME WAFileWriteTime);
long CALLBACK Wrapper_WAFileIsDirectory(char *WAFileToSearch);
HANDLE CALLBACK Wrapper_WAFileOpenR(char *WAFileName);
HANDLE CALLBACK Wrapper_WAFileOpenW(char *WAFileName, long WAFilePos);
HANDLE CALLBACK Wrapper_WAFileOpenWAppend(char *WAFileName);
char * CALLBACK Wrapper_WAFileRemoveExtension(char *WAFileName);
char * CALLBACK Wrapper_WAFileReplaceExtension(char *WAFileName, char *WANewExtension);
long CALLBACK Wrapper_WAFileIsReadOnly(char *WAFileToCheck);
long CALLBACK Wrapper_WAFileIsUnix(char *WAFileToCheck);
HGLOBAL CALLBACK Wrapper_WAFileLoadIntoMem(char *WAFileToLoad, long *BytesRd);
long CALLBACK Wrapper_WAFileSaveFromMem(char *WAFileToSave, long MemToSave, long LenToSave);
char * CALLBACK Wrapper_WAFileDir(char *WAWildCard, long FileType);
long CALLBACK Wrapper_WAFileWriteLine(HANDLE WAFileHandle, char *WALineToWrite);
char * CALLBACK Wrapper_WAFTPGetEntryDate(char *WADirEntry);
char * CALLBACK Wrapper_WAFTPGetEntryFileAttributes(char *WADirEntry);
char * CALLBACK Wrapper_WAFTPGetEntryFileName(char *WADirEntry);
char * CALLBACK Wrapper_WAFTPGetEntryFileSize(char *WADirEntry);
long CALLBACK Wrapper_WAFTPIsEntryDir(char *WADirEntry);
long CALLBACK Wrapper_WAGDIGetTextHeight(HWND WAhWnd, HFONT WAhFont, char *WATxt);
long CALLBACK Wrapper_WAGDIGetTextWidth(HWND WAhWnd, HFONT WAhFont, char *WATxt);
HFONT CALLBACK Wrapper_WAGDIObtainFont(char *WAFontNameToObtain, long WAFontSizeToObtain, HWND WAhWnd, long WABold, long WAItalic);
void CALLBACK Wrapper_WAGDIWriteClippedText(HDC WAhDC, long WAx, long WAy, long WAWidth, long WAHeight, char *WAText, long WATextColor, HFONT WAhTextFont, long WATextTransparent, long WABackGroundColor);
void CALLBACK Wrapper_WAGDIWriteText(HDC WAhDC, long WAx, long WAy, char *WAText, long WATextColor, HFONT WAhTextFont, long WATextTransparent, long WABackGroundColor);
long CALLBACK Wrapper_WAIniDeleteKey(char *WASection, char *WAKey, char *WAFile);
char * CALLBACK Wrapper_WAIniReadKey(char *WASection, char *WAKey, char *WAFile);
long CALLBACK Wrapper_WAIniReadBoolKey(char *WASection, char *WAKey, char *WAFile);
long CALLBACK Wrapper_WAIniWriteKey(char *WASection, char *WAKey, char *WAValue, char *WAFile);
long CALLBACK Wrapper_WAIniWriteSection(char *WASection, char *WAKey, char *WAFile);
long CALLBACK Wrapper_WAListBoxAddItem(HWND WAhLB, char *WALBItemText, long WALBItemIndex);
char * CALLBACK Wrapper_WAListBoxGetCurrentItem(HWND WAhLB);
char * CALLBACK Wrapper_WAListBoxGetItem(HWND WAhLB, long WALBIndex);
long CALLBACK Wrapper_WAListBoxItemExist(HWND WAhListBox, char *WACBItem);
long CALLBACK Wrapper_WAListBoxReplaceItem(HWND WAhLB, long WALBIndex, char *WALBNewItem);
long CALLBACK Wrapper_WAListBoxReplaceSelItem(HWND WAhLB, char *WBLBNewItemText);
long CALLBACK Wrapper_WAListViewAddCol(HWND WAhListView, char *WALVColText, long WALVWidth, long WAColPosition);
long CALLBACK Wrapper_WAListViewAddItem(HWND WAhListView, char *WALVItemText, long WALVItemPos, long WALVImage);
long CALLBACK Wrapper_WAListViewFindItem(HWND WAhListView, char *WALVItemText);
long CALLBACK Wrapper_WAListViewFindSubItem(HWND WAhListView, char *WATextToFind, long WASubItemNbr, long WASearchCase);
char * CALLBACK Wrapper_WAListViewGetEditResult(long WAlParam);
char * CALLBACK Wrapper_WAListViewGetHeaderLabel(HWND WAhListView, long WALVColNumber);
char * CALLBACK Wrapper_WAListViewGetItemText(HWND WAhListView, long WALVItemIndex, long WALVSubItemNumber);
char * CALLBACK Wrapper_WAListViewGetSelItemText(HWND WAhListView, long WALVSubItemNumber);
long CALLBACK Wrapper_WAListViewSetSelItemText(HWND WAhListView, char *WALVItemText, long WALVSubItemNumber);
long CALLBACK Wrapper_WAListViewSetSubItem(HWND WAhListView, char *WALVItemText, long WALVItemPos, long WALVSubItemPos);
char * CALLBACK Wrapper_WAMenuGetString(HMENU WAhMenu, long WAItemID);
long CALLBACK Wrapper_WARebarAddBand(HWND WAhRebar, HWND WAhChild, char *WARBText, long WARBYSize, long WAExtraStyle, long WAMinSize);
long CALLBACK Wrapper_WARegistryDeleteKey(HKEY WAKeyRoot, char *WAKeyName, char *WASubKeyName, long WAKeyType);
char * CALLBACK Wrapper_WARegistryGetKeyValue(HKEY WAKeyRoot, char *WAKeyName, char *WASubKeyRef);
long CALLBACK Wrapper_WARegistryUpdateKey(HKEY WAKeyRoot, char *WAKeyName, char *WASubKeyName, char *WASubKeyValue, long WAKeyType);
void CALLBACK Wrapper_WAMiscShellAddFileToRecents(char *WAFileName);
long CALLBACK Wrapper_SocketConnect(SOCKET WAhSock, LPSOCKADDR_IN WASockStruct, long WAMessage, HWND WAhWnd, char *WAIP, long WAPort, long WATimeOut);
char * CALLBACK Wrapper_SocketReceiveASCIIDatas(SOCKET WAhSock);
long CALLBACK Wrapper_SocketSendASCIIDatasCR(SOCKET WAhSock, char *WABuffer);
long CALLBACK Wrapper_StatusBarSetText(HWND WAhStatusBar, long WASBPart, long WARaiseType, char *WASBText, long WAOwnerDatas);
long CALLBACK Wrapper_StringCount(char *WAMaIn_String, char *StringToCount, long WACountStart, long WACompareType);
char * CALLBACK Wrapper_StringReplace(char *WAMaIn_String, char *StringToFind, char *StringToReplace, long WAReplaceStart, long WARepCount, long WACompareType);
char * CALLBACK Wrapper_StringGetSplitElement(char *WAStrFromSplit, long *WASplitMem, long WAElement);
char * CALLBACK Wrapper_StringHex16(long WANumber);
char * CALLBACK Wrapper_StringHex32(long WANumber);
char * CALLBACK Wrapper_StringHex8(long WANumber);
long CALLBACK Wrapper_StringIsAlphaChar(char *WAALetter);
long CALLBACK Wrapper_StringIsArobasChar(char *WAPLetter);
long CALLBACK Wrapper_StringIsBlankChar(char *WABLetter);
long CALLBACK Wrapper_StringIsDecimal(char *WADecText, long WAMaxLen);
long CALLBACK Wrapper_StringIsDigitChar(char *WADLetter);
long CALLBACK Wrapper_StringIsDotChar(char *WAPLetter);
long CALLBACK Wrapper_StringIsCommaChar(char *WAPLetter);
long CALLBACK Wrapper_StringIsQuoteChar(char *WAPLetter);
long CALLBACK Wrapper_StringIsEOL(char *WAEOLetter);
long CALLBACK Wrapper_StringIsHexaChar(char *WAALetter);
long CALLBACK Wrapper_StringIsHexaDecimal(char *WAHexaText);
long CALLBACK Wrapper_StringIsLabel(char *WAAsmText);
long CALLBACK Wrapper_StringIsLabelChar(char *WAVCLetter);
long CALLBACK Wrapper_StringIsOpenBracketChar(char *WAOLetter);
long CALLBACK Wrapper_StringIsUnderLineChar(char *WAULetter);
char * CALLBACK Wrapper_StringJoin(char *WAStrFromSplit, long *WASplitMem, char *WAJoIn_String, long WAFirstElement, long WAElementLimit);
char * CALLBACK Wrapper_StringNumberComplement(long WANbr, long WAComplement);
char * CALLBACK Wrapper_StringHexNumberComplement(long WANbr, long WAComplement);
char * CALLBACK Wrapper_StringBinNumberComplement(long WANbr, long WAComplement);
long * CALLBACK Wrapper_StringSplit(char *WAStrToSplit, char *WAStrSplitter);
char * CALLBACK Wrapper_StringCat(char *String1, char *String2);
char * CALLBACK Wrapper_StringDecToString(long WADecimalNbr);
long CALLBACK Wrapper_StringStringToDec(char *WADecString);
long CALLBACK Wrapper_StringStringToHex(char *WAHexString);
char * CALLBACK StringLeft(char *String, long Dat);
char * CALLBACK StringRight(char *String, long Dat);
char * CALLBACK StringTrim(char *String);
char * CALLBACK StringLTrim(char *String);
char * CALLBACK StringRTrim(char *String);
long CALLBACK StringInStr(char *String, long Start, char *WASearchString = 0, long CompType = Binary_Compare);
char * CALLBACK StringMid(char *String, long Start, long Len = -1);
char * CALLBACK StringUpperCase(char *String);
char * CALLBACK StringLowerCase(char *String);
char * CALLBACK StringReverse(char *String);
char * CALLBACK StringSpace(long Len);
char * CALLBACK StringString(long Len, long Dat);
long CALLBACK StringIsNumeric(char *String);
long CALLBACK Wrapper_WASysTabAddItem(HWND WAhTab, char *WATabText, long WATabIndex, long WAImgIndex);
void CALLBACK Wrapper_WATextBoxAddText(HWND WAhTextBox, char *WATbText);
char * CALLBACK Wrapper_WATextBoxGetPasswordChar(HWND WAhTextBox);
long CALLBACK Wrapper_WATextBoxSetPasswordChar(HWND WAhTextBox, char *PassChar);
long CALLBACK Wrapper_WAToolBarAddButton(HWND WAhToolbar, char *ButtonText, long WATBButtonID, long WAImgIndex, long ButtonStyle, long ButtonState, long WANoImage);
void CALLBACK Wrapper_WAToolBarDisplayToolTip(char *WATextToShow, long WAlParam);
HTREEITEM CALLBACK Wrapper_WATreeViewAddItem(HWND WAhTreeView, char *WATVItemText, HTREEITEM WATVParent, HTREEITEM WATVChildPos, long WATVImage, long WATVSelImage, long WAExtraStyle, long WARefreshParentAfterAdd);
char * CALLBACK Wrapper_WATreeViewGetItemText(HWND WAhTreeView, HTREEITEM WAhItem);
long CALLBACK Wrapper_WATreeViewSearchChildPartialText(HWND WAhTreeView, HTREEITEM WAhNode, char *WAItemText);
long CALLBACK Wrapper_WATreeViewSearchItemText(HWND WAhTreeView, HTREEITEM WAhNode, char *WAItemText);
long CALLBACK Wrapper_WATreeViewSetItemText(HWND WAhTreeView, HTREEITEM WAhItem, char *WAItemText);
long CALLBACK WAMiscObtainExtendedFunctions(void);
HWND WAMMCreateCustomChildDialog(CStr Title, void (CALLBACK *CallBackInit)(HWND hwnd), WNDPROC CallBackProc);
HWND CALLBACK Wrapper_WAMMCreateCustomChildDialog(char *Title, void (CALLBACK *CallBackInit)(HWND hwnd), WNDPROC CallBackProc);
HWND CALLBACK WAMMCreateCodeMax(long Left, long Top, long Width, long Height, HWND hWnd, void (CALLBACK *CodeMaxPropertiesHook)(HWND));
HWND CALLBACK Wrapper_WACreateDockingBox(char *Title, WNDPROC WindowProc);
long CALLBACK Wrapper_DockingBoxWasVisible(char *DockName);
void CALLBACK Wrapper_DockingBoxShow(HWND hDock, int DefaultXSize, int DefaultYSize, int DefaultState);

#endif
